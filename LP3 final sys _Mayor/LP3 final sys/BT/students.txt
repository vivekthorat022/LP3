// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {

    // Define a structure to hold student details
    struct Student {
        string name;
        uint age;
        uint grade;
    }

    // Array to store list of students
    Student[] public students;

    // Event to log the addition of a new student
    event StudentAdded(string name, uint age, uint grade);

    // Receive function to handle plain Ether transfers (no data)
    receive() external payable {
        // This function is called when Ether is sent to the contract with no data
        // You can emit an event or log it here if desired
    }

    // Fallback function to handle calls with invalid data or non-existent functions
    fallback() external payable {
        // This function will be triggered when an invalid function is called
        // or when ether is sent with the transaction but no data.
    }

    // Function to add a student to the contract
    function addStudent(string memory _name, uint _age, uint _grade) public {
        Student memory newStudent = Student({
            name: _name,
            age: _age,
            grade: _grade
        });

        students.push(newStudent);

        // Emit an event to log the new student
        emit StudentAdded(_name, _age, _grade);
    }

    // Function to retrieve student details by index
    function getStudent(uint index) public view returns (string memory, uint, uint) {
        require(index < students.length, "Student does not exist");
        Student memory student = students[index];
        return (student.name, student.age, student.grade);
    }

    // Function to get the total number of students
    function getTotalStudents() public view returns (uint) {
        return students.length;
    }
}
